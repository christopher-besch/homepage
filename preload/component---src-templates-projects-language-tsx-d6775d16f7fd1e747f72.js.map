{"version":3,"file":"component---src-templates-projects-language-tsx-d6775d16f7fd1e747f72.js","mappings":"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","sources":["webpack://homepage/./src/components/hover_icon.tsx","webpack://homepage/./src/components/project_list.tsx","webpack://homepage/./src/styles/project_list.module.scss","webpack://homepage/./src/templates/projects_language.tsx","webpack://homepage/./src/utils/consts.tsx","webpack://homepage/./src/utils/languages.tsx"],"sourcesContent":["import React from \"react\";\n\nimport * as styles from \"src/styles/hover_icon.module.scss\";\nimport get_mask from \"src/utils/svg_mask\";\n\ninterface HoverIconProps {\n    icon: string;\n    alt?: string;\n    icon_mono?: string;\n    className?: string;\n    // used to add hover effect to out-of-scope elements\n    icon_class?: string;\n    icon_mono_class?: string;\n}\nconst HoverIcon: React.FC<HoverIconProps> = (props) => {\n    const icon = props.icon;\n    const alt = props.alt ? props.alt : \"icon\";\n    const icon_mono = props.icon_mono ? props.icon_mono : icon;\n    return (\n        <div className={`${styles.icon_wrapper} ${props.className}`}>\n            <img\n                className={`${styles.icon} ${props.icon_class}`}\n                src={icon}\n                alt={alt}\n            />\n            <div\n                className={`${styles.icon_mono} ${props.icon_mono_class}`}\n                style={get_mask(icon_mono)}\n            ></div>\n        </div>\n    );\n};\nexport default HoverIcon;\n","import { getImage, GatsbyImage, IGatsbyImageData, ImageDataLike } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport * as styles from \"src/styles/project_list.module.scss\";\nimport { Language, languages } from \"src/utils/languages\";\nimport HoverIcon from \"./hover_icon\";\n\nexport type Project = {\n    id: number;\n    date: string;\n    languages: Language[];\n    priority: number;\n    dependencies: string[];\n    description: string;\n    slug: string;\n    link: string;\n    title: string;\n    thumb: IGatsbyImageData;\n}\n\nexport function gql_to_project(project: any): Project {\n    return {\n        id: project.node.id,\n        date: project.node.frontmatter?.date,\n        languages: project.node.frontmatter?.languages.map((language: string) => languages.get(language)),\n        priority: parseInt(project.node.frontmatter?.priority),\n        dependencies: project.node.frontmatter?.dependencies,\n        description: project.node.frontmatter?.description,\n        slug: project.node.frontmatter?.slug,\n        link: project.node.frontmatter?.link,\n        title: project.node.frontmatter?.title,\n        thumb: getImage(project.node.frontmatter?.thumb as ImageDataLike)!,\n    };\n}\n\ninterface ProjectListProps {\n    projects: Project[];\n    count: number;\n    className?: string;\n}\nconst ProjectList: React.FC<ProjectListProps> = (props) => {\n    const count = props.count;\n    const full_width = `${100 / count}%`;\n    const half_width = `${100 / Math.ceil(count / 2)}%`;\n    const quarter_width = `${100 / Math.ceil(count / 4)}%`;\n    let width_properties = {\n        \"--full-width\": full_width,\n        \"--half-width\": half_width,\n        \"--quarter-width\": quarter_width,\n    } as React.CSSProperties;\n    return (\n        <div className={`${styles.projects} ${props.className}`}>\n            {props.projects.map(project =>\n                <a href={project.link} target=\"_blank\" key={project.id} className={styles.project} style={width_properties}>\n                    <div className={styles.content}>\n                        <div className={styles.image_wrapper}>\n                            <GatsbyImage className={styles.image} image={project.thumb} alt=\"thumbnail\" />\n                            <div className={styles.overlay}>\n                                <h2 className={styles.heading}>{project.title}</h2>\n                                <div className={styles.languages}>\n                                    {project.languages.map(language =>\n                                        <HoverIcon\n                                            className={styles.language_icon}\n                                            key={`${project.id}${language.id}`}\n                                            icon={language.icon}\n                                            icon_mono={language.icon_mono}\n                                            alt={language.id}\n                                            icon_class={styles.icon}\n                                            icon_mono_class={styles.icon_mono}\n                                        />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className={styles.text}>\n                            <p>{project.description}</p>\n                        </div>\n                    </div>\n                </a>\n            )}\n        </div>);\n};\nexport default ProjectList;\n","// extracted by mini-css-extract-plugin\nexport var content = \"project_list-module--content--X4RCX\";\nexport var heading = \"project_list-module--heading--WtmWI\";\nexport var icon = \"project_list-module--icon--af6I8\";\nexport var icon_mono = \"project_list-module--icon_mono--f98N0\";\nexport var image = \"project_list-module--image--sF6qu\";\nexport var image_wrapper = \"project_list-module--image_wrapper--dFZqW\";\nexport var language_icon = \"project_list-module--language_icon--XgM-W\";\nexport var languages = \"project_list-module--languages--C854W\";\nexport var overlay = \"project_list-module--overlay--XYwST\";\nexport var project = \"project_list-module--project--s09uQ\";\nexport var projects = \"project_list-module--projects--r5Yl-\";\nexport var text = \"project_list-module--text--JYNq1\";","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { ProjectsLanguagePage } from \"./__generated__/projects-language-page\";\n\nimport Layout from \"src/components/layout\";\nimport ProjectList, { gql_to_project } from \"src/components/project_list\";\nimport * as util_styles from \"src/styles/utils.module.scss\";\nimport { languages } from \"src/utils/languages\";\nimport { with_location, PropsWithLocation } from \"src/utils/with_location\";\nimport { max_priority_language_default, max_priority_language_all } from \"src/utils/consts\";\n\ninterface ProjectsLanguageProps extends PropsWithLocation {\n    data: ProjectsLanguagePage;\n    // TODO: better type\n    pageContext: Record<string, any>;\n}\nconst ProjectsLanguage: React.FC<ProjectsLanguageProps> = (props) => {\n    const max_priority = props.search.max_priority != null ? parseInt(props.search.max_priority as string) : max_priority_language_default;\n    const all_projects = props.data.allMdx.edges.map(gql_to_project);\n    const projects = all_projects.filter(project => project.priority <= max_priority);\n    const selected_language_id = props.pageContext.language;\n    const selected_language = languages.get(selected_language_id)!;\n\n    return (\n        <Layout heading={`${selected_language.name} Projects`} sub_heading={selected_language_id == \"java\" ? \" You found an easter egg!\" : \"\"} icon={selected_language.icon_mono}>\n            <ProjectList projects={projects} count={3} />\n            <Link className={`${util_styles.block} ${util_styles.link}`} to=\"/projects\">Other Projects</Link>\n            {max_priority < max_priority_language_all ? <Link className={`${util_styles.block} ${util_styles.link}`} to={`/projects/${selected_language.id}?max_priority=${max_priority_language_all}`}>Show All</Link> : undefined}\n        </Layout >);\n};\nexport default with_location(ProjectsLanguage);\n\nexport const query = graphql`\nquery ProjectsLanguagePage($language: [String]) {\n  allMdx(\n    sort: {fields: frontmatter___priority, order: ASC}\n    filter: {frontmatter: {type: {eq: \"project\"}, languages: {in: $language}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          languages\n          priority\n          dependencies\n          slug\n          link\n          description\n          title\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n","export const max_priority_highlight = 0;\n// highest priority shown in project list\nexport const max_priority_list_default = 6;\n// highest priority shown in language specific project list\nexport const max_priority_language_default = 30;\n// highest priority shown in project list when \"show all\" has been selected\n// highest priority shown in language specific project list when \"show all\" has been selected\nexport const max_priority_list_all = 40;\nexport const max_priority_language_all = 50;\n\n// highlight (very impressive):\n//  0 - flagship project\n//  1 - highly polished / very interesting\n\n// projects (impressive):\n//  2 - polished\n//  3 - polished, bad docs\n//  4 - interesting experiment\n//  6 - polished, unmaintained\n\n// language specific projects (not so impressive):\n//  7 - polished, little use\n//  8 - polished, abandoned\n//  9 - unpolished\n// 21 - early stuff\n\n// all projects:\n// 31 - break fourth wall\n// 32 - show off, no use\n// 33 - show off, no use, less interesting\n// 34 - exotic\n// 35 - \"good\" java\n\n// all language specific languages:\n// 41 - unpolished, exotic\n\n// break url:\n// 51 - broken garbage\n\nexport const present_url = \"http://127.0.0.1:8080\";\n\n","export type Language = {\n    id: string;\n    name: string;\n    icon: string;\n    icon_mono: string;\n};\n\nexport const languages = new Map<string, Language>([\n    [\"python\", {\n        id: \"python\",\n        name: \"Python\",\n        icon: \"/icons/python.svg\",\n        icon_mono: \"/icons/python.svg\"\n    }],\n    [\"cpp\", {\n        id: \"cpp\",\n        name: \"C++\",\n        icon: \"/icons/c-plusplus.svg\",\n        icon_mono: \"/icons/c-plusplus_mono.svg\"\n    }],\n    [\"typescript\", {\n        id: \"typescript\",\n        name: \"TypeScript\",\n        icon: \"/icons/typescript-icon.svg\",\n        icon_mono: \"/icons/typescript-icon_mono.svg\"\n    }],\n    [\"java\", {\n        id: \"java\",\n        name: \"Java\",\n        icon: \"/icons/java.svg\",\n        icon_mono: \"/icons/java.svg\"\n    }],\n]);\n"],"names":["props","icon","alt","icon_mono","React","className","styles","icon_class","src","icon_mono_class","style","get_mask","gql_to_project","project","id","node","date","frontmatter","_project$node$frontma","languages","_project$node$frontma2","map","language","priority","parseInt","_project$node$frontma3","dependencies","_project$node$frontma4","description","_project$node$frontma5","slug","_project$node$frontma6","link","_project$node$frontma7","title","_project$node$frontma8","thumb","getImage","_project$node$frontma9","count","width_properties","Math","ceil","projects","href","target","key","GatsbyImage","image","HoverIcon","with_location","max_priority","search","max_priority_language_default","data","allMdx","edges","filter","selected_language_id","pageContext","selected_language","Layout","heading","name","sub_heading","ProjectList","Link","util_styles","to","max_priority_language_all","undefined","max_priority_highlight","max_priority_list_default","max_priority_list_all","Map"],"sourceRoot":""}