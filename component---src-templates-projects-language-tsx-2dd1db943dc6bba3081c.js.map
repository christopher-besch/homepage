{"version":3,"file":"component---src-templates-projects-language-tsx-2dd1db943dc6bba3081c.js","mappings":"iPA+BA,WAAeA,EAAAA,EAAAA,IAfUC,IAA0D,IAAzD,KAAEC,EAAI,YAAEC,EAAW,OAAEC,GAA+BH,EAC1E,MAAMI,EAAsC,MAAvBD,EAAOC,aAAuBC,SAASF,EAAOC,cAA0BE,EAAAA,GAGvFC,EADeN,EAAKO,OAAOC,MAAMC,IAAIC,EAAAA,GACbC,QAAOC,GAAWA,EAAQC,UAAYV,IAC9DW,EAAuBb,EAAYc,SACnCC,EAAoBC,EAAAA,EAAUC,IAAIJ,GAExC,OACIK,EAAAA,cAACC,EAAAA,EAAM,CAACC,QAAU,GAAEL,EAAkBM,gBAAiBC,YAAqC,QAAxBT,EAAiC,4BAA8B,GAAIU,KAAMR,EAAkBS,WAC3JN,EAAAA,cAACO,EAAAA,EAAW,CAACpB,SAAUA,EAAUqB,MAAO,IACxCR,EAAAA,cAACS,EAAAA,GAAI,CAACC,UAAY,GAAEC,EAAAA,MAAqBA,EAAAA,KAAoBC,GAAG,aAAY,kBAC3E5B,EAAe6B,EAAAA,GAA4Bb,EAAAA,cAACS,EAAAA,GAAI,CAACC,UAAY,GAAEC,EAAAA,MAAqBA,EAAAA,KAAoBC,GAAK,aAAYf,EAAkBiB,mBAAmBD,EAAAA,MAA6B,iBAAkBE,EACxM,IAIX,MA8BMC,EAAOA,IAChBhB,EAAAA,cAACiB,EAAAA,EAAG,CAACf,QAAQ,Y","sources":["webpack://homepage/./src/templates/projects_language.tsx"],"sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"src/components/layout\";\nimport ProjectList, { gql_to_project } from \"src/components/project_list\";\nimport * as util_styles from \"src/styles/utils.module.scss\";\nimport { languages } from \"src/utils/languages\";\nimport { with_location, PropsWithLocation } from \"src/utils/with_location\";\nimport { max_priority_language_default, max_priority_language_all } from \"src/utils/consts\";\nimport SEO from \"src/components/seo\";\n\ninterface ProjectsLanguageProps extends PropsWithLocation {\n    data: Queries.ProjectsLanguageQuery;\n    // TODO: better type\n    pageContext: Record<string, any>;\n}\nconst ProjectsLanguage = ({ data, pageContext, search }: ProjectsLanguageProps) => {\n    const max_priority = search.max_priority != null ? parseInt(search.max_priority as string) : max_priority_language_default;\n\n    const all_projects = data.allMdx.edges.map(gql_to_project);\n    const projects = all_projects.filter(project => project.priority <= max_priority);\n    const selected_language_id = pageContext.language;\n    const selected_language = languages.get(selected_language_id)!;\n\n    return (\n        <Layout heading={`${selected_language.name} Projects`} sub_heading={selected_language_id == \"java\" ? \" You found an easter egg!\" : \"\"} icon={selected_language.icon_mono}>\n            <ProjectList projects={projects} count={3} />\n            <Link className={`${util_styles.block} ${util_styles.link}`} to=\"/projects\">Other Projects</Link>\n            {max_priority < max_priority_language_all ? <Link className={`${util_styles.block} ${util_styles.link}`} to={`/projects/${selected_language.id}?max_priority=${max_priority_language_all}`}>Show All</Link> : undefined}\n        </Layout >);\n};\nexport default with_location(ProjectsLanguage);\n\nexport const query = graphql`\nquery ProjectsLanguage($language: [String]) {\n  allMdx(\n    sort: {frontmatter: {priority: ASC}}\n    filter: {frontmatter: {type: {eq: \"project\"}, languages: {in: $language}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          languages\n          priority\n          dependencies\n          slug\n          link\n          description\n          title\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n\nexport const Head = () => (\n    <SEO heading=\"Projects\" />\n);\n"],"names":["with_location","_ref","data","pageContext","search","max_priority","parseInt","max_priority_language_default","projects","allMdx","edges","map","gql_to_project","filter","project","priority","selected_language_id","language","selected_language","languages","get","React","Layout","heading","name","sub_heading","icon","icon_mono","ProjectList","count","Link","className","util_styles","to","max_priority_language_all","id","undefined","Head","SEO"],"sourceRoot":""}