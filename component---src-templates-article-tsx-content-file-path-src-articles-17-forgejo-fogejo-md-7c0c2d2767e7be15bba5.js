"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[149],{3374:function(e,t,n){n.r(t),n.d(t,{Head:function(){return S},default:function(){return y}});var o=n(8453),l=n(6540);function a(e){const t=Object.assign({p:"p",a:"a",ul:"ul",li:"li",code:"code",h2:"h2",span:"span",ol:"ol",pre:"pre",em:"em",h3:"h3",h1:"h1",strong:"strong"},(0,o.R)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"Forgejo is a code forge:\nJust like GitHub or GitLab it's a place to (collaboratively) develop software.\nBecause Forgejo is incredibly easy to self-host and I love it's Open-Source community, I chose it for my private code forge.\nI've already explained at length ",l.createElement(t.a,{href:"/articles/open_source"},"why I love Open-Source")," so much."),"\n",l.createElement(t.p,null,"With my new code forge up and running there were a few features my team needed.\nSpecifically we needed to receive email notifications and webhooks when a CI Workflow failed.\nForgejo didn't offer that feature so I started contributing to Forgejo.\nThrough this article I want to give back as much of what I've learned in doing so.\nThe parts that took the most effort where"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"setting up a development environment,"),"\n",l.createElement(t.li,null,"understanding Forgejo's notification architecture,"),"\n",l.createElement(t.li,null,"actually implementing the features and"),"\n",l.createElement(t.li,null,"writing exhaustive tests for the features I implemented."),"\n"),"\n",l.createElement(t.p,null,"Be aware that I'm describing all of this as of commit ",l.createElement(t.code,null,"b2c4fc9f94")," (Sat Jun 21 13:11:01 2025 +0200).\nSome of this information may be outdated for any newer state of the code base."),"\n",l.createElement(t.h2,{id:"development-setup",style:{position:"relative"}},l.createElement(t.a,{href:"#development-setup","aria-label":"development setup permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Development Setup"),"\n",l.createElement(t.p,null,"To test the features I developed I don't just need the Forgjeo executable.\nNo, I also need an action runner, a mail server and some place to send webhooks to.\nLet's start with just getting a Forgejo test instance up and running."),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"I use Debian but this setup should work on all Linux distros (and maybe macOS and BSD?)."),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script"},"Install node and npm"),"."),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://go.dev/doc/install"},"Install go"),"."),"\n",l.createElement(t.li,null,"Install ",l.createElement(t.a,{href:"https://github.com/gotestyourself/gotestsum"},"gotestsum"),".\nThis is entirely optional.\nIf you don't install gotestsum, ignore all the ",l.createElement(t.code,null,"USE_GOTESTSUM=yes")," statements below."),"\n",l.createElement(t.li,null,"Download the ",l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo"},"Forgejo Repo")," with ",l.createElement(t.code,null,"git clone https://codeberg.org/forgejo/forgejo ~/forgejo && cd ~/forgejo"),"."),"\n",l.createElement(t.li,null,"Build an executable with ",l.createElement(t.code,null,'STRIP="0" EXTRA_GOFLAGS=\'-gcflags="all=-N -l"\' TAGS="sqlite sqlite_unlock_notify" make build'),".\nIt took me a while to realize that ",l.createElement(t.code,null,"go build")," enables optimization by default but keeps all debug symbols present.\nWe change that with the ",l.createElement(t.code,null,"gsflags")," by neither optimizing or inlining.\nFurthermore, Forgejo's Makefile strips the debug symbols so we disable that with the ",l.createElement(t.code,null,"STRIP")," environment variable."),"\n",l.createElement(t.li,null,"Run ",l.createElement(t.code,null,"./gitea"),".\nYes, the executable is still called that."),"\n",l.createElement(t.li,null,"Open a webbrowser and navigate to ",l.createElement(t.a,{href:"http://localhost:3000"},"http://localhost:3000"),"."),"\n",l.createElement(t.li,null,"Choose SQLite, create an admin account and keep everything else default.\nYour config is in ",l.createElement(t.code,null,"~/forgejo/custom/conf/app.ini"),"."),"\n",l.createElement(t.li,null,"Create the ",l.createElement(t.code,null,"test_repo")," repository and add the file ",l.createElement(t.code,null,".forgejo/workflows/main.yml"),":","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-yaml"},"enable-email-notifications: true\non:\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: self-hosted\n    steps:\n      - name: Echo\n        run: |\n          echo Hello World!\n      - name: Fail\n        run: |\n          false\n")),"\n","You can make your life a little easier by cloning the repo: ",l.createElement(t.code,null,"git clone http://localhost:3000/chris_admin/test_repo.git ~forgejo_test_repo"),".\nYou'll have to follow the prompts and configure your ",l.createElement(t.code,null,"user.email")," and ",l.createElement(t.code,null,"user.name"),".\nI'm using password login, btw."),"\n",l.createElement(t.li,null,"Download the ",l.createElement(t.a,{href:"https://code.forgejo.org/forgejo/runner/releases"},"Forgejo runner binary")," into ",l.createElement(t.code,null,"~/forgejo_runner"),"."),"\n",l.createElement(t.li,null,"Register the runner with ",l.createElement(t.code,null,"./forgejo-runner-11.1.2-linux-amd64 register"),", give the instance URL ",l.createElement(t.code,null,"http://localhost:3000"),", the runner token you get from the repo settings in the web interface, choose a name like ",l.createElement(t.code,null,"test-runner")," and select the label ",l.createElement(t.code,null,"self-hosted:host"),"."),"\n",l.createElement(t.li,null,"Run ",l.createElement(t.code,null,"./forgejo-runner-11.1.2-linux-amd64 daemon")," and click the workflow trigger button in the web interface.\nYou should see your workflow run now."),"\n"),"\n",l.createElement(t.p,null,"Okay, that works fine but we also want to test sending emails.\nI use ",l.createElement(t.a,{href:"https://github.com/maildev/maildev"},"MailDev")," to create a development email server.\nIt provides an SMTP server, which Forgejo connects to, and a webinterface for me, the developer."),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://docs.docker.com/engine/install"},"Install Docker"),"."),"\n",l.createElement(t.li,null,"Run ",l.createElement(t.code,null,"docker run --network host -p 1080:1080 -p 1025:1025 maildev/maildev"),"."),"\n",l.createElement(t.li,null,"Open ",l.createElement(t.a,{href:"http://localhost:1080"},"http://localhost:1080")," in a webbrowser."),"\n",l.createElement(t.li,null,"Shutdown Forgejo and edit it's config (in ",l.createElement(t.code,null,"~/forgejo/custom/conf/app.ini"),").","\n",l.createElement(t.pre,null,l.createElement(t.code,null,"[mailer]\nENABLED = true\nPROTOCOL = smtp\nSMTP_ADDR = localhost\nSMTP_PORT = 1025\nFROM = forgejo@localhost\n\n# make sure this is true\n[service]\nENABLE_NOTIFY_MAIL = true\n")),"\n"),"\n",l.createElement(t.li,null,"Now, when the workflow fails you should get a mail in the MailDev web interface."),"\n"),"\n",l.createElement(t.p,null,"Furthermore, we want to test webhooks."),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"I'm using ",l.createElement(t.a,{href:"https://stackoverflow.com/a/46787467"},"this node script")," as a test webhook:\n",l.createElement(t.code,null,"webhook_tester.js"),":","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-js"},'#!/usr/bin/env node\n\nconst http = require("http");\n\nconst hostname = "0.0.0.0";\nconst port = 8001;\n\nconst server = http.createServer((req, res) => {\n  console.log(`\\n${req.method} ${req.url}`);\n  console.log(req.headers);\n\n  req.on("data", function(chunk) {\n    console.log("BODY: " + chunk);\n  });\n\n  res.statusCode = 200;\n  res.setHeader("Content-Type", "text/plain");\n  res.end("Hello World\\n");\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n')),"\n"),"\n",l.createElement(t.li,null,"Run ",l.createElement(t.code,null,"./webhook_tester.js"),"."),"\n",l.createElement(t.li,null,"Shutdown Forgejo and edit it's config (in ",l.createElement(t.code,null,"~/forgejo/custom/conf/app.ini"),").\nFor Forgejo to accept ",l.createElement(t.code,null,"http://localhost:8001")," as a webhook target you need to add this:","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-ini"},"[webhook]\nALLOWED_HOST_LIST = *\nSKIP_TLS_VERIFY = true\n")),"\n"),"\n",l.createElement(t.li,null,"Create a new webhook in the Repo Settings and use the target URL ",l.createElement(t.code,null,"http://localhost:8001"),".\nEnable either ",l.createElement(t.em,null,"All events")," or ",l.createElement(t.em,null,"Custom events"),", selecting the ",l.createElement(t.em,null,"Action Run events"),"."),"\n",l.createElement(t.li,null,"Start the workflow, let it fail and watch the sent webhook in the node terminal."),"\n"),"\n",l.createElement(t.h3,{id:"running-all-tests",style:{position:"relative"}},l.createElement(t.a,{href:"#running-all-tests","aria-label":"running all tests permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Running All Tests"),"\n",l.createElement(t.p,null,"Forejeo has are different types of tests.\nI was concerned with these types."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Run all unit tests with ",l.createElement(t.code,null,"TAGS='sqlite sqlite_unlock_notify' USE_GOTESTSUM=yes make test"),"."),"\n",l.createElement(t.li,null,"Run all integration tests with ",l.createElement(t.code,null,"TAGS='sqlite sqlite_unlock_notify' USE_GOTESTSUM=yes make test-sqlite"),"."),"\n"),"\n",l.createElement(t.p,null,"There are other types of tests, namely frontend tests and the End-to-End tests in a special repo.\nI didn't work with these yet so I direct you to the ",l.createElement(t.a,{href:"https://forgejo.org/docs/latest/contributor/testing"},"testing docs"),"."),"\n",l.createElement(t.h3,{id:"running-specific-tests",style:{position:"relative"}},l.createElement(t.a,{href:"#running-specific-tests","aria-label":"running specific tests permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Running Specific Tests"),"\n",l.createElement(t.p,null,"Say you only want to run this unit test in ",l.createElement(t.code,null,"~/forgejo/models/actions/run_test.go"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-go"},"func TestGetRunBefore(t *testing.T) {\n  // --snip--\n}\n")),"\n",l.createElement(t.p,null,"Then you can execute ",l.createElement(t.code,null,"USE_GOTESTSUM=yes TAGS='sqlite sqlite_unlock_notify' GO_TEST_PACKAGES='forgejo.org/models/actions' make 'test#TestGetRunBefore'"),"."),"\n",l.createElement(t.p,null,"If you are concerned with this integration test in ",l.createElement(t.code,null,"~/forgejo/tests/integration/actions_notifications_test.go"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-go"},"func TestActionNotifications(t *testing.T) {\n  // --snip--\n}\n")),"\n",l.createElement(t.p,null,"Then you can run ",l.createElement(t.code,null,"USE_GOTESTSUM=yes TAGS='sqlite sqlite_unlock_notify' make 'test-sqlite#TestActionNotifications'"),"."),"\n",l.createElement(t.h3,{id:"debugging-tests",style:{position:"relative"}},l.createElement(t.a,{href:"#debugging-tests","aria-label":"debugging tests permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Debugging Tests"),"\n",l.createElement(t.p,null,"TODO\n",l.createElement(t.code,null,"break forgejo.org/tests/integration.TestActionNotification")),"\n",l.createElement(t.h3,{id:"debugging",style:{position:"relative"}},l.createElement(t.a,{href:"#debugging","aria-label":"debugging permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Debugging"),"\n",l.createElement(t.p,null,"I like the terminal and am used to GDB.\nTherefore I'm using the terminal debugger ",l.createElement(t.a,{href:"https://github.com/go-delve/delve"},"Delve"),".\nLet's set things up for that:"),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://github.com/go-delve/delve/tree/master/Documentation/installation"},"Install Delve"),"."),"\n",l.createElement(t.li,null,"Build Forgejo as described ",l.createElement(t.a,{href:"#development-setup"},"above"),"."),"\n",l.createElement(t.li,null,"Run ",l.createElement(t.code,null,"dlv exec ./gitea"),"."),"\n",l.createElement(t.li,null,"Now we can use the Delve console.\nFor example you can do ",l.createElement(t.code,null,"break forgejo.org/services/mailer.(*mailNotifier).ActionRunNowDone"),", ",l.createElement(t.code,null,"break forgejo.org/services/notify.ActionRunNowDone")," and ",l.createElement(t.code,null,"continue"),".\nHit ",l.createElement(t.code,null,"Ctrl+C")," to enter a Delve command and type ",l.createElement(t.code,null,"quit")," to exit.\nTODO: debug tests"),"\n"),"\n",l.createElement(t.h3,{id:"forgejos-observer-pattern",style:{position:"relative"}},l.createElement(t.a,{href:"#forgejos-observer-pattern","aria-label":"forgejos observer pattern permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Forgejo's Observer Pattern"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://forgejo.org/docs/next/contributor/architecture"},"Forgejo's architecture overview")," is quite helpful."),"\n",l.createElement(t.li,null,"duplicity of structs"),"\n"),"\n",l.createElement(t.h2,{id:"my-changes",style:{position:"relative"}},l.createElement(t.a,{href:"#my-changes","aria-label":"my changes permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"My Changes"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7510"},"#7510: Refactoring")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7491"},"#7491: Actions Done Notification")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7697"},"#7697: After the Fact Cleanup")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7509"},"#7509: Actions Done Mail")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7508"},"#7508: Actions Done Webhook")),"\n",l.createElement(t.li,null,"at same time to #7508 ",l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/7508"},"#7699: (not mine) introduce ActionRun, too")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/8066"},"#8066: (not mine) rename #7699's struct to RepoActionRun")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/8250"},"#8250: (not mine) unify ActionRun and RepoActionRun")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/8227"},"#8227: (not mine) Only single user receives mail")),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://codeberg.org/forgejo/forgejo/pulls/8242"},"#8242: (not mine) actions mail opt-in")),"\n"),"\n",l.createElement(t.h2,{id:"conclusion-and-lessons-learned",style:{position:"relative"}},l.createElement(t.a,{href:"#conclusion-and-lessons-learned","aria-label":"conclusion and lessons learned permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion and Lessons Learned"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"architecture of Forgejo notifications"),"\n",l.createElement(t.li,null,"importance of tests, what tests I wrote"),"\n",l.createElement(t.li,null,"testing setup, I didn't have that much time directly after all PRs -> tests vital"),"\n",l.createElement(t.li,null,"think of testing not as a side-gig!"),"\n",l.createElement(t.li,null,"break things up into multiple PRs"),"\n",l.createElement(t.li,null,"less code is better"),"\n",l.createElement(t.li,null,"understand as much as possible, then make the minimal change that is needed (knock someone out with your pinky)"),"\n"),"\n",l.createElement(t.h1,{id:"todo-write",style:{position:"relative"}},l.createElement(t.a,{href:"#todo-write","aria-label":"todo write permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"TODO: write"),"\n",l.createElement(t.p,null,"Right now that happens to be Forgejo Action notifications.\nActions are Forgejo's pendant to GitHub Actions.\nThey are used to build and test code in a ",l.createElement(t.strong,null,"c"),"ontinuous ",l.createElement(t.strong,null,"i"),"ntegration/",l.createElement(t.strong,null,"d"),"eployment (CI/CD) pipeline.\nNow something Forgejo lacked was a notification when something went wrong"),"\n",l.createElement(t.p,null,"So, I had a stab at understanding Forgejo's code and from what I can tell this is how a webhook gets turned into an actual http request:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"services/webhook/deliver.go.Deliver() called by"),"\n",l.createElement(t.li,null,"services/webhook/webhook.go.handler() used as handler in hookQueue in"),"\n",l.createElement(t.li,null,"services/webhook/deliver.go.Init()"),"\n",l.createElement(t.li,null,"the hookQueue is filled in services/webhook/webhook.go.enqueueHookTask() called in"),"\n",l.createElement(t.li,null,"services/webhook/webhook.go.PrepareWebhook() called in"),"\n",l.createElement(t.li,null,"services/webhook/webhook.go.PrepareWebhooks() called by"),"\n",l.createElement(t.li,null,"the webhookNotifier defined in services/webhook/notifier.go"),"\n"),"\n",l.createElement(t.p,null,"And this is how a workflow gets sent to a runner:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"services/actions/workflows.go.Dispatch() calls"),"\n",l.createElement(t.li,null,"models/actions/run.go.InsertRun() to store the to happen action run in the database"),"\n",l.createElement(t.li,null,"[haven't figures this part out yet]"),"\n"),"\n",l.createElement(t.p,null,"I think this is what needs to be done:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"add new notifier channel for finished action workflow"),"\n",l.createElement(t.li,null,"make webhookNotifier listen to the action workflow notification","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"add new HookEventType"),"\n",l.createElement(t.li,null,"implement settings for this new type of webhook"),"\n"),"\n"),"\n",l.createElement(t.li,null,"create mailNotifier listen to the action workflow notification","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"[haven't figured this part out yet]"),"\n"),"\n"),"\n",l.createElement(t.li,null,"figure out where forgejo realizes that an action run finished or failed to start and emit the new signal"),"\n",l.createElement(t.li,null,"maybe add some more info to the database to remember when the last run failed and this one succeeded"),"\n"),"\n",l.createElement(t.p,null,"What do you think?\nI'd like to open a PR for this next week so any input is appreciated."),"\n",l.createElement(t.p,null,"Updated investigation on how a workflow gets sent to a runner:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"services/actions/workflows.go.Dispatch() calls"),"\n",l.createElement(t.li,null,"models/actions/run.go.InsertRun() to store the to happen action run in the database, this also increases the tasks version"),"\n",l.createElement(t.li,null,"runner calls FetchTasks route in routers/api/actoins/runner/runner.go.FetchTasks()"),"\n",l.createElement(t.li,null,"there forgejo checks if a new tasks exists by checking the tasksVersion the runner provides and the one in the database using models/actions/tasks_version.go.GetTasksVersionByScope()"),"\n",l.createElement(t.li,null,"when the versions differ that implies there could be tasks to be done we get a new task to do with services.actions.task.go.PickTask() and send that to the runner"),"\n",l.createElement(t.li,null,"there we call models/actions/task.go.CreateTaskForRunner()"),"\n"),"\n",l.createElement(t.h2,{id:"how-do-job-runs-timeout",style:{position:"relative"}},l.createElement(t.a,{href:"#how-do-job-runs-timeout","aria-label":"how do job runs timeout permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"How do job runs timeout:"),"\n",l.createElement(t.p,null,"How does Forgejo notice when a run succeeded or failed:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"that info is stored in the ",l.createElement(t.code,null,"Status")," field of the ",l.createElement(t.code,null,"ActionRun")," database relation"),"\n",l.createElement(t.li,null,"the only place where that status changes is in ",l.createElement(t.a,{href:"http://models.actions.run"},"models.actions.run"),".go.UpdateRun()"),"\n",l.createElement(t.li,null,"this is called (only the interesting calls that change the status) in","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"routers.web.repo.actions.view.go.Rerun() and"),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"http://models.actions.run"},"models.actions.run"),"_job.go.UpdateRunJob() called in a bunch of places"),"\n"),"\n"),"\n"),"\n",l.createElement(t.p,null,"We are only interested in ",l.createElement(t.code,null,"ActionRun"),", not ",l.createElement(t.code,null,"ActionRunJob")),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-go"},'// don\'t need approval if the user has been approved before\nif count, err := db.Count[actions_model.ActionRun](ctx, actions_model.FindRunOptions{\n    RepoID:        repo.ID,\n    TriggerUserID: user.ID,\n    Approved:      true,\n}); err != nil {\n    return false, fmt.Errorf("CountRuns: %w", err)\n} else if count > 0 {\n    log.Trace("do not need approval because user %d has been approved before", user.ID)\n    return false, nil\n}\n')),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-go"},'func GetLatestRun(ctx context.Context, repoID int64) (*ActionRun, error) {\n\tvar run ActionRun\n\thas, err := db.GetEngine(ctx).Where("repo_id=?", repoID).OrderBy("id DESC").Limit(1).Get(&run)\n\tif err != nil {\n\t\treturn nil, err\n\t} else if !has {\n\t\treturn nil, fmt.Errorf("latest run: %w", util.ErrNotExist)\n\t}\n\treturn &run, nil\n}\n')),"\n",l.createElement(t.p,null,"I completed my investigation on where to call the notification channel.\nI added my verdict on the call tree in braces below."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'- (can\'t call notify) models/actions/run.go|392 col 6| func UpdateRun(ctx context.Context, run *ActionRun, cols ...string) error {\n    - (can\'t call notify) models/actions/run_job.go|157 col 13| if err := UpdateRun(ctx, run, "status", "started", "stopped"); err != nil {\n        part of models/actions/run_job.go|104 col 6| func UpdateRunJob(ctx context.Context, job *ActionRunJob, cond builder.Cond, cols ...string) (int64, error) {\n            - (not relvant as we don\'t change the status) models/actions/run.go|232 col 15| n, err := UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}, "status", "stopped")\n            - (not relevant as only a new job is created) models/actions/task.go|316 col 15| if n, err := UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}); err != nil {\n            - (doesn\'t change the state on action runs that are already done) models/actions/task.go|378 col 16| if _, err := UpdateRunJob(ctx, &ActionRunJob{\n            - (can\'t call notify) models/actions/task.go|442 col 15| if _, err := UpdateRunJob(ctx, &ActionRunJob{\n                part of models/actions/task.go|423 col 6| func StopTask(ctx context.Context, taskID int64, status Status) error {\n                - (can\'t call notify) models/actions/run.go|247 col 14| if err := StopTask(ctx, job.TaskID, StatusCancelled); err != nil {\n                    part of models/actions/run.go|190 col 6| func CancelPreviousJobs(ctx context.Context, repoID int64, ref, workflowID string, event webhook_module.HookEventType) error {\n                    - (can\'t call notify) models/actions/schedule.go|130 col 13| if err := CancelPreviousJobs(\n                        part of models/actions/schedule.go|122 col 6| func CleanRepoScheduleTasks(ctx context.Context, repo *repo_model.Repository, cancelPreviousJobs bool) error {\n                        - (*) routers/api/v1/repo/repo.go|1068 col 28| if err := actions_model.CleanRepoScheduleTasks(ctx, repo, true); err != nil {\n                        - (*) routers/web/repo/setting/setting.go|1037 col 27| if err := actions_model.CleanRepoScheduleTasks(ctx, repo, true); err != nil {\n                        - (*) services/actions/notifier_helper.go|142 col 27| if err := actions_model.CleanRepoScheduleTasks(ctx, input.Repo, true); err != nil {\n                        - (doesn\'t stop any runs as cancelPreviousJobs is false) services/actions/notifier_helper.go|507 col 27| if err := actions_model.CleanRepoScheduleTasks(ctx, input.Repo, false); err != nil {\n                        - (*) services/repository/setting.go|32 col 27| if err := actions_model.CleanRepoScheduleTasks(ctx, repo, true); err != nil {\n                    - (*) services/actions/notifier_helper.go|376 col 28| if err := actions_model.CancelPreviousJobs(\n                    - (*) services/actions/schedule_tasks.go|58 col 29| if err := actions_model.CancelPreviousJobs(\n                    - (*) services/repository/branch.go|380 col 28| if err := actions_model.CancelPreviousJobs(\n                    - (*) services/repository/branch.go|581 col 27| if err := actions_model.CancelPreviousJobs(\n                - (*) routers/web/repo/actions/view.go|524 col 28| if err := actions_model.StopTask(ctx, job.TaskID, actions_model.StatusCancelled); err != nil {\n                - (*) services/actions/clear_tasks.go|44 col 28| if err := actions_model.StopTask(ctx, task.ID, actions_model.StatusFailure); err != nil {\n            - (not relevant as we only set the status to StatusWaiting) routers/web/repo/actions/view.go|439 col 27| _, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"status": status}, "task_id", "status", "started", "stopped")\n            - (*a) routers/web/repo/actions/view.go|515 col 29| n, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}, "status", "stopped")\n            - (not relevant as we only set the status to StatusWaiting) routers/web/repo/actions/view.go|558 col 29| _, err := actions_model.UpdateRunJob(ctx, job, nil, "status")\n            - (*a) services/actions/clear_tasks.go|91 col 28| _, err := actions_model.UpdateRunJob(ctx, job, nil, "status", "stopped")\n            - (*a) services/actions/job_emitter.go|62 col 32| if n, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"status": actions_model.StatusBlocked}, "status"); err != nil {\n    - (not relevant as we only change the status when it is currently done) routers/web/repo/actions/view.go|386 col 27| if err := actions_model.UpdateRun(ctx, run, "started", "stopped", "previous_duration"); err != nil {\n    - (not relevant as we don\'t change the status) routers/web/repo/actions/view.go|552 col 27| if err := actions_model.UpdateRun(ctx, run, "need_approval", "approved_by"); err != nil {\n')),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'- (can\'t call notify) models/actions/run.go|392 col 6| func UpdateRun(ctx context.Context, run *ActionRun, cols ...string) error {\n    - (can\'t call notify) models/actions/run_job.go|157 col 13| if err := UpdateRun(ctx, run, "status", "started", "stopped"); err != nil {\n        part of models/actions/run_job.go|104 col 6| func UpdateRunJob(ctx context.Context, job *ActionRunJob, cond builder.Cond, cols ...string) (int64, error) {\n            - (not relvant as we don\'t change the status) models/actions/run.go|232 col 15| n, err := UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}, "status", "stopped")\n            - (not relevant as only a new job is created) models/actions/task.go|316 col 15| if n, err := UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}); err != nil {\n            - (*a) [moved to services now] services/actions/task.go|378 col 16| if _, err := UpdateRunJob(ctx, &ActionRunJob{\n            - (*a) services/actions/task.go|130 col 29| if _, err := actions_model.UpdateRunJob(ctx, &actions_model.ActionRunJob{\n            - (not relevant as we only set the status to StatusWaiting) routers/web/repo/actions/view.go|439 col 27| _, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"status": status}, "task_id", "status", "started", "stopped")\n            - (*a) routers/web/repo/actions/view.go|515 col 29| n, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"task_id": 0}, "status", "stopped")\n            - (not relevant as we only set the status to StatusWaiting) routers/web/repo/actions/view.go|558 col 29| _, err := actions_model.UpdateRunJob(ctx, job, nil, "status")\n            - (*a) services/actions/clear_tasks.go|91 col 28| _, err := actions_model.UpdateRunJob(ctx, job, nil, "status", "stopped")\n            - (*a) services/actions/job_emitter.go|62 col 32| if n, err := actions_model.UpdateRunJob(ctx, job, builder.Eq{"status": actions_model.StatusBlocked}, "status"); err != nil {\n    - (not relevant as we only change the status when it is currently done) routers/web/repo/actions/view.go|386 col 27| if err := actions_model.UpdateRun(ctx, run, "started", "stopped", "previous_duration"); err != nil {\n    - (not relevant as we don\'t change the status) routers/web/repo/actions/view.go|552 col 27| if err := actions_model.UpdateRun(ctx, run, "need_approval", "approved_by"); err != nil {\n')),"\n",l.createElement(t.p,null,"So what do we do?\nI'd say we do a mix of things.\nI think the locations labeled with ",l.createElement(t.code,null,"(*a)")," can be amended with calls to the notification channel.\nThese locations are where UpdateRun or UpdateRunJob are called.\nSome of these calls don't change the status at all so they don't need to call the channel anyways."),"\n",l.createElement(t.p,null,"Then there's the thing with StopTask.\nI think it's best to move that function, CancelPreviousJobs and CleanRepoScheduleTasks to services/actions.\nSo propose moving these functions over:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"- models/actions/task.go|423 col 6| func StopTask(ctx context.Context, taskID int64, status Status) error {\n- models/actions/run.go|190 col 6| func CancelPreviousJobs(ctx context.Context, repoID int64, ref, workflowID string, event webhook_module.HookEventType) error {\n- models/actions/schedule.go|122 col 6| func CleanRepoScheduleTasks(ctx context.Context, repo *repo_model.Repository, cancelPreviousJobs bool) error {\n")),"\n",l.createElement(t.p,null,"These functions are pretty far detached from the actual database and contain a lot of logic.\nWhat do you say?"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.R)(),e.components);return t?l.createElement(t,e,l.createElement(a,e)):a(e)},s=n(5365),i=n(2224),c=n(9121),u=n(4241),d=n(4810),m=n(1244),h=n(5071),p=n(9105),g=n(6897),f=n(7629),E=n(8029),b=n(1042),v=n(5526),w=n(5969);const k={AutoPlayVideo:h.A,HalfImage:p.A,Spacer:g.A,Quote:f.A,Iframe:E.A,CompareView:m.A,pre:e=>{let{children:t}=e;return l.createElement("div",{className:"code-container"}," ",l.createElement("pre",null,t))},code:e=>{let{children:t,className:n}=e;return n?l.createElement(v.A,{className:n},t):l.createElement("code",{className:"language-text"},t)},a:w.A},_=e=>{var t,n,a,r,m,h,p,g,f,E,b,v,w,_;let{data:y,children:S}=e;const j=null===(t=y.mdx)||void 0===t||null===(n=t.frontmatter)||void 0===n?void 0:n.version,x=null===(a=y.mdx)||void 0===a||null===(r=a.frontmatter)||void 0===r?void 0:r.title,R=/^0\./.test(j)?`Draft v${j}`:void 0,T=null===(m=y.mdx)||void 0===m||null===(h=m.frontmatter)||void 0===h?void 0:h.date,I=null!=(null===(p=y.mdx)||void 0===p||null===(g=p.frontmatter)||void 0===g?void 0:g.title_banner),C={"--banner-image-horizontal-position":null===(f=y.mdx)||void 0===f||null===(E=f.frontmatter)||void 0===E?void 0:E.title_banner_horizontal_position,"--banner-image-vertical-position":null===(b=y.mdx)||void 0===b||null===(v=b.frontmatter)||void 0===v?void 0:v.title_banner_vertical_position};return l.createElement(s.A,{heading:x,sub_heading:R,banner_image:I?null===(w=y.mdx)||void 0===w||null===(_=w.frontmatter)||void 0===_?void 0:_.title_banner:void 0,banner_image_style:C,small_banner:!0,banner_content:l.createElement("div",{className:`${i.yu} ${I?i.Lx:void 0}`},l.createElement("span",{className:i.cy},"Written by Christopher Besch, published on "),T)},l.createElement("div",{className:c.xo},l.createElement(o.x,{components:k},S)),l.createElement(d.N_,{className:`${u.om} ${u.nf}`,to:"/articles"},"More Articles"))};function y(e){return l.createElement(_,e,l.createElement(r,e))}const S=e=>{var t,n,o,a,r,s;let{data:i}=e;const c=null===(t=i.mdx)||void 0===t||null===(n=t.frontmatter)||void 0===n?void 0:n.title,u=null===(o=i.mdx)||void 0===o||null===(a=o.frontmatter)||void 0===a?void 0:a.description,d=null===(r=i.mdx)||void 0===r||null===(s=r.frontmatter)||void 0===s?void 0:s.banner,m=d&&"undefined"!=d?d:void 0;return l.createElement(b.A,{heading:c,description:u,banner:m})}}}]);
//# sourceMappingURL=component---src-templates-article-tsx-content-file-path-src-articles-17-forgejo-fogejo-md-7c0c2d2767e7be15bba5.js.map