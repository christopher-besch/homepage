"""Add date formatting options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` and
`children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
  field: String!
  fieldValue: String
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int

  """Copy file to static directory and return public url to it"""
  publicURL: String

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp

  """Returns all children nodes filtered by type Mdx"""
  childrenMdx: [Mdx]

  """
  Returns the first child node of type Mdx or null if there are no children of given type on this node
  """
  childMdx: Mdx
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  publicURL
  childrenImageSharp
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___width
  childrenImageSharp___original___height
  childrenImageSharp___original___src
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id
  childrenImageSharp___parent___id
  childrenImageSharp___parent___parent___id
  childrenImageSharp___parent___parent___children
  childrenImageSharp___parent___children
  childrenImageSharp___parent___children___id
  childrenImageSharp___parent___children___children
  childrenImageSharp___parent___internal___content
  childrenImageSharp___parent___internal___contentDigest
  childrenImageSharp___parent___internal___description
  childrenImageSharp___parent___internal___fieldOwners
  childrenImageSharp___parent___internal___ignoreType
  childrenImageSharp___parent___internal___mediaType
  childrenImageSharp___parent___internal___owner
  childrenImageSharp___parent___internal___type
  childrenImageSharp___children
  childrenImageSharp___children___id
  childrenImageSharp___children___parent___id
  childrenImageSharp___children___parent___children
  childrenImageSharp___children___children
  childrenImageSharp___children___children___id
  childrenImageSharp___children___children___children
  childrenImageSharp___children___internal___content
  childrenImageSharp___children___internal___contentDigest
  childrenImageSharp___children___internal___description
  childrenImageSharp___children___internal___fieldOwners
  childrenImageSharp___children___internal___ignoreType
  childrenImageSharp___children___internal___mediaType
  childrenImageSharp___children___internal___owner
  childrenImageSharp___children___internal___type
  childrenImageSharp___internal___content
  childrenImageSharp___internal___contentDigest
  childrenImageSharp___internal___description
  childrenImageSharp___internal___fieldOwners
  childrenImageSharp___internal___ignoreType
  childrenImageSharp___internal___mediaType
  childrenImageSharp___internal___owner
  childrenImageSharp___internal___type
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width
  childImageSharp___original___height
  childImageSharp___original___src
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id
  childImageSharp___parent___id
  childImageSharp___parent___parent___id
  childImageSharp___parent___parent___children
  childImageSharp___parent___children
  childImageSharp___parent___children___id
  childImageSharp___parent___children___children
  childImageSharp___parent___internal___content
  childImageSharp___parent___internal___contentDigest
  childImageSharp___parent___internal___description
  childImageSharp___parent___internal___fieldOwners
  childImageSharp___parent___internal___ignoreType
  childImageSharp___parent___internal___mediaType
  childImageSharp___parent___internal___owner
  childImageSharp___parent___internal___type
  childImageSharp___children
  childImageSharp___children___id
  childImageSharp___children___parent___id
  childImageSharp___children___parent___children
  childImageSharp___children___children
  childImageSharp___children___children___id
  childImageSharp___children___children___children
  childImageSharp___children___internal___content
  childImageSharp___children___internal___contentDigest
  childImageSharp___children___internal___description
  childImageSharp___children___internal___fieldOwners
  childImageSharp___children___internal___ignoreType
  childImageSharp___children___internal___mediaType
  childImageSharp___children___internal___owner
  childImageSharp___children___internal___type
  childImageSharp___internal___content
  childImageSharp___internal___contentDigest
  childImageSharp___internal___description
  childImageSharp___internal___fieldOwners
  childImageSharp___internal___ignoreType
  childImageSharp___internal___mediaType
  childImageSharp___internal___owner
  childImageSharp___internal___type
  childrenMdx
  childrenMdx___rawBody
  childrenMdx___fileAbsolutePath
  childrenMdx___frontmatter___title
  childrenMdx___frontmatter___type
  childrenMdx___frontmatter___slug
  childrenMdx___frontmatter___description
  childrenMdx___frontmatter___link
  childrenMdx___frontmatter___priority
  childrenMdx___frontmatter___date
  childrenMdx___frontmatter___languages
  childrenMdx___frontmatter___dependencies
  childrenMdx___frontmatter___thumb___sourceInstanceName
  childrenMdx___frontmatter___thumb___absolutePath
  childrenMdx___frontmatter___thumb___relativePath
  childrenMdx___frontmatter___thumb___extension
  childrenMdx___frontmatter___thumb___size
  childrenMdx___frontmatter___thumb___prettySize
  childrenMdx___frontmatter___thumb___modifiedTime
  childrenMdx___frontmatter___thumb___accessTime
  childrenMdx___frontmatter___thumb___changeTime
  childrenMdx___frontmatter___thumb___birthTime
  childrenMdx___frontmatter___thumb___root
  childrenMdx___frontmatter___thumb___dir
  childrenMdx___frontmatter___thumb___base
  childrenMdx___frontmatter___thumb___ext
  childrenMdx___frontmatter___thumb___name
  childrenMdx___frontmatter___thumb___relativeDirectory
  childrenMdx___frontmatter___thumb___dev
  childrenMdx___frontmatter___thumb___mode
  childrenMdx___frontmatter___thumb___nlink
  childrenMdx___frontmatter___thumb___uid
  childrenMdx___frontmatter___thumb___gid
  childrenMdx___frontmatter___thumb___rdev
  childrenMdx___frontmatter___thumb___ino
  childrenMdx___frontmatter___thumb___atimeMs
  childrenMdx___frontmatter___thumb___mtimeMs
  childrenMdx___frontmatter___thumb___ctimeMs
  childrenMdx___frontmatter___thumb___atime
  childrenMdx___frontmatter___thumb___mtime
  childrenMdx___frontmatter___thumb___ctime
  childrenMdx___frontmatter___thumb___birthtime
  childrenMdx___frontmatter___thumb___birthtimeMs
  childrenMdx___frontmatter___thumb___blksize
  childrenMdx___frontmatter___thumb___blocks
  childrenMdx___frontmatter___thumb___publicURL
  childrenMdx___frontmatter___thumb___childrenImageSharp
  childrenMdx___frontmatter___thumb___childrenMdx
  childrenMdx___frontmatter___thumb___id
  childrenMdx___frontmatter___thumb___children
  childrenMdx___frontmatter___banner
  childrenMdx___frontmatter___listed
  childrenMdx___frontmatter___version
  childrenMdx___slug
  childrenMdx___body
  childrenMdx___excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenMdx___headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenMdx___headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenMdx___headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenMdx___html
  childrenMdx___mdxAST
  childrenMdx___tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenMdx___timeToRead
  childrenMdx___wordCount___paragraphs
  childrenMdx___wordCount___sentences
  childrenMdx___wordCount___words
  childrenMdx___id
  childrenMdx___parent___id
  childrenMdx___parent___parent___id
  childrenMdx___parent___parent___children
  childrenMdx___parent___children
  childrenMdx___parent___children___id
  childrenMdx___parent___children___children
  childrenMdx___parent___internal___content
  childrenMdx___parent___internal___contentDigest
  childrenMdx___parent___internal___description
  childrenMdx___parent___internal___fieldOwners
  childrenMdx___parent___internal___ignoreType
  childrenMdx___parent___internal___mediaType
  childrenMdx___parent___internal___owner
  childrenMdx___parent___internal___type
  childrenMdx___children
  childrenMdx___children___id
  childrenMdx___children___parent___id
  childrenMdx___children___parent___children
  childrenMdx___children___children
  childrenMdx___children___children___id
  childrenMdx___children___children___children
  childrenMdx___children___internal___content
  childrenMdx___children___internal___contentDigest
  childrenMdx___children___internal___description
  childrenMdx___children___internal___fieldOwners
  childrenMdx___children___internal___ignoreType
  childrenMdx___children___internal___mediaType
  childrenMdx___children___internal___owner
  childrenMdx___children___internal___type
  childrenMdx___internal___content
  childrenMdx___internal___contentDigest
  childrenMdx___internal___description
  childrenMdx___internal___fieldOwners
  childrenMdx___internal___ignoreType
  childrenMdx___internal___mediaType
  childrenMdx___internal___owner
  childrenMdx___internal___type
  childMdx___rawBody
  childMdx___fileAbsolutePath
  childMdx___frontmatter___title
  childMdx___frontmatter___type
  childMdx___frontmatter___slug
  childMdx___frontmatter___description
  childMdx___frontmatter___link
  childMdx___frontmatter___priority
  childMdx___frontmatter___date
  childMdx___frontmatter___languages
  childMdx___frontmatter___dependencies
  childMdx___frontmatter___thumb___sourceInstanceName
  childMdx___frontmatter___thumb___absolutePath
  childMdx___frontmatter___thumb___relativePath
  childMdx___frontmatter___thumb___extension
  childMdx___frontmatter___thumb___size
  childMdx___frontmatter___thumb___prettySize
  childMdx___frontmatter___thumb___modifiedTime
  childMdx___frontmatter___thumb___accessTime
  childMdx___frontmatter___thumb___changeTime
  childMdx___frontmatter___thumb___birthTime
  childMdx___frontmatter___thumb___root
  childMdx___frontmatter___thumb___dir
  childMdx___frontmatter___thumb___base
  childMdx___frontmatter___thumb___ext
  childMdx___frontmatter___thumb___name
  childMdx___frontmatter___thumb___relativeDirectory
  childMdx___frontmatter___thumb___dev
  childMdx___frontmatter___thumb___mode
  childMdx___frontmatter___thumb___nlink
  childMdx___frontmatter___thumb___uid
  childMdx___frontmatter___thumb___gid
  childMdx___frontmatter___thumb___rdev
  childMdx___frontmatter___thumb___ino
  childMdx___frontmatter___thumb___atimeMs
  childMdx___frontmatter___thumb___mtimeMs
  childMdx___frontmatter___thumb___ctimeMs
  childMdx___frontmatter___thumb___atime
  childMdx___frontmatter___thumb___mtime
  childMdx___frontmatter___thumb___ctime
  childMdx___frontmatter___thumb___birthtime
  childMdx___frontmatter___thumb___birthtimeMs
  childMdx___frontmatter___thumb___blksize
  childMdx___frontmatter___thumb___blocks
  childMdx___frontmatter___thumb___publicURL
  childMdx___frontmatter___thumb___childrenImageSharp
  childMdx___frontmatter___thumb___childrenMdx
  childMdx___frontmatter___thumb___id
  childMdx___frontmatter___thumb___children
  childMdx___frontmatter___banner
  childMdx___frontmatter___listed
  childMdx___frontmatter___version
  childMdx___slug
  childMdx___body
  childMdx___excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___html
  childMdx___mdxAST
  childMdx___tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___timeToRead
  childMdx___wordCount___paragraphs
  childMdx___wordCount___sentences
  childMdx___wordCount___words
  childMdx___id
  childMdx___parent___id
  childMdx___parent___parent___id
  childMdx___parent___parent___children
  childMdx___parent___children
  childMdx___parent___children___id
  childMdx___parent___children___children
  childMdx___parent___internal___content
  childMdx___parent___internal___contentDigest
  childMdx___parent___internal___description
  childMdx___parent___internal___fieldOwners
  childMdx___parent___internal___ignoreType
  childMdx___parent___internal___mediaType
  childMdx___parent___internal___owner
  childMdx___parent___internal___type
  childMdx___children
  childMdx___children___id
  childMdx___children___parent___id
  childMdx___children___parent___children
  childMdx___children___children
  childMdx___children___children___id
  childMdx___children___children___children
  childMdx___children___internal___content
  childMdx___children___internal___contentDigest
  childMdx___children___internal___description
  childMdx___children___internal___fieldOwners
  childMdx___children___internal___ignoreType
  childMdx___children___internal___mediaType
  childMdx___children___internal___owner
  childMdx___children___internal___type
  childMdx___internal___content
  childMdx___internal___contentDigest
  childMdx___internal___description
  childMdx___internal___fieldOwners
  childMdx___internal___ignoreType
  childMdx___internal___mediaType
  childMdx___internal___owner
  childMdx___internal___type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  publicURL: StringQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  childrenMdx: MdxFilterListInput
  childMdx: MdxFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
  field: String!
  fieldValue: String
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum HeadingsMdx {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width
  original___height
  original___src
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
  field: String!
  fieldValue: String
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

type Mdx implements Node {
  rawBody: String!
  fileAbsolutePath: String!
  frontmatter: MdxFrontmatter
  slug: String
  body: String!
  excerpt(pruneLength: Int = 140, truncate: Boolean = false): String!
  headings(depth: HeadingsMdx): [MdxHeadingMdx]
  html: String
  mdxAST: JSON
  tableOfContents(maxDepth: Int): JSON
  timeToRead: Int
  wordCount: MdxWordCount
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type MdxConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldsEnum!): [String!]!
  max(field: MdxFieldsEnum!): Float
  min(field: MdxFieldsEnum!): Float
  sum(field: MdxFieldsEnum!): Float
  group(skip: Int, limit: Int, field: MdxFieldsEnum!): [MdxGroupConnection!]!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

enum MdxFieldsEnum {
  rawBody
  fileAbsolutePath
  frontmatter___title
  frontmatter___type
  frontmatter___slug
  frontmatter___description
  frontmatter___link
  frontmatter___priority
  frontmatter___date
  frontmatter___languages
  frontmatter___dependencies
  frontmatter___thumb___sourceInstanceName
  frontmatter___thumb___absolutePath
  frontmatter___thumb___relativePath
  frontmatter___thumb___extension
  frontmatter___thumb___size
  frontmatter___thumb___prettySize
  frontmatter___thumb___modifiedTime
  frontmatter___thumb___accessTime
  frontmatter___thumb___changeTime
  frontmatter___thumb___birthTime
  frontmatter___thumb___root
  frontmatter___thumb___dir
  frontmatter___thumb___base
  frontmatter___thumb___ext
  frontmatter___thumb___name
  frontmatter___thumb___relativeDirectory
  frontmatter___thumb___dev
  frontmatter___thumb___mode
  frontmatter___thumb___nlink
  frontmatter___thumb___uid
  frontmatter___thumb___gid
  frontmatter___thumb___rdev
  frontmatter___thumb___ino
  frontmatter___thumb___atimeMs
  frontmatter___thumb___mtimeMs
  frontmatter___thumb___ctimeMs
  frontmatter___thumb___atime
  frontmatter___thumb___mtime
  frontmatter___thumb___ctime
  frontmatter___thumb___birthtime
  frontmatter___thumb___birthtimeMs
  frontmatter___thumb___blksize
  frontmatter___thumb___blocks
  frontmatter___thumb___publicURL
  frontmatter___thumb___childrenImageSharp
  frontmatter___thumb___childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childrenImageSharp___id
  frontmatter___thumb___childrenImageSharp___children
  frontmatter___thumb___childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childImageSharp___id
  frontmatter___thumb___childImageSharp___children
  frontmatter___thumb___childrenMdx
  frontmatter___thumb___childrenMdx___rawBody
  frontmatter___thumb___childrenMdx___fileAbsolutePath
  frontmatter___thumb___childrenMdx___slug
  frontmatter___thumb___childrenMdx___body
  frontmatter___thumb___childrenMdx___excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childrenMdx___headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childrenMdx___html
  frontmatter___thumb___childrenMdx___mdxAST
  frontmatter___thumb___childrenMdx___tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childrenMdx___timeToRead
  frontmatter___thumb___childrenMdx___id
  frontmatter___thumb___childrenMdx___children
  frontmatter___thumb___childMdx___rawBody
  frontmatter___thumb___childMdx___fileAbsolutePath
  frontmatter___thumb___childMdx___slug
  frontmatter___thumb___childMdx___body
  frontmatter___thumb___childMdx___excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childMdx___headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childMdx___html
  frontmatter___thumb___childMdx___mdxAST
  frontmatter___thumb___childMdx___tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  frontmatter___thumb___childMdx___timeToRead
  frontmatter___thumb___childMdx___id
  frontmatter___thumb___childMdx___children
  frontmatter___thumb___id
  frontmatter___thumb___parent___id
  frontmatter___thumb___parent___children
  frontmatter___thumb___children
  frontmatter___thumb___children___id
  frontmatter___thumb___children___children
  frontmatter___thumb___internal___content
  frontmatter___thumb___internal___contentDigest
  frontmatter___thumb___internal___description
  frontmatter___thumb___internal___fieldOwners
  frontmatter___thumb___internal___ignoreType
  frontmatter___thumb___internal___mediaType
  frontmatter___thumb___internal___owner
  frontmatter___thumb___internal___type
  frontmatter___banner
  frontmatter___listed
  frontmatter___version
  slug
  body
  excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  html
  mdxAST
  tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  timeToRead
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input MdxFilterInput {
  rawBody: StringQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  frontmatter: MdxFrontmatterFilterInput
  slug: StringQueryOperatorInput
  body: StringQueryOperatorInput
  excerpt: StringQueryOperatorInput
  headings: MdxHeadingMdxFilterListInput
  html: StringQueryOperatorInput
  mdxAST: JSONQueryOperatorInput
  tableOfContents: JSONQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: MdxWordCountFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input MdxFilterListInput {
  elemMatch: MdxFilterInput
}

type MdxFrontmatter {
  title: String!
  type: String
  slug: String
  description: String
  link: String
  priority: Int
  date(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  languages: [String]
  dependencies: [String]
  thumb: File
  banner: String
  listed: Boolean
  version: String
}

input MdxFrontmatterFilterInput {
  title: StringQueryOperatorInput
  type: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  description: StringQueryOperatorInput
  link: StringQueryOperatorInput
  priority: IntQueryOperatorInput
  date: DateQueryOperatorInput
  languages: StringQueryOperatorInput
  dependencies: StringQueryOperatorInput
  thumb: FileFilterInput
  banner: StringQueryOperatorInput
  listed: BooleanQueryOperatorInput
  version: StringQueryOperatorInput
}

type MdxGroupConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldsEnum!): [String!]!
  max(field: MdxFieldsEnum!): Float
  min(field: MdxFieldsEnum!): Float
  sum(field: MdxFieldsEnum!): Float
  group(skip: Int, limit: Int, field: MdxFieldsEnum!): [MdxGroupConnection!]!
  field: String!
  fieldValue: String
}

type MdxHeadingMdx {
  value: String
  depth: Int
}

input MdxHeadingMdxFilterInput {
  value: StringQueryOperatorInput
  depth: IntQueryOperatorInput
}

input MdxHeadingMdxFilterListInput {
  elemMatch: MdxHeadingMdxFilterInput
}

input MdxSortInput {
  fields: [MdxFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type MdxWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MdxWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, publicURL: StringQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, childrenMdx: MdxFilterListInput, childMdx: MdxFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, trailingSlash: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: SiteFunctionSortInput, skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, pluginCreator: SitePluginFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  sitePlugin(resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, packageJson: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(buildTime: DateQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  mdx(rawBody: StringQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: MdxFrontmatterFilterInput, slug: StringQueryOperatorInput, body: StringQueryOperatorInput, excerpt: StringQueryOperatorInput, headings: MdxHeadingMdxFilterListInput, html: StringQueryOperatorInput, mdxAST: JSONQueryOperatorInput, tableOfContents: JSONQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: MdxWordCountFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Mdx
  allMdx(filter: MdxFilterInput, sort: MdxSortInput, skip: Int, limit: Int): MdxConnection!
}

type Site implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  buildTime
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___title
  siteMetadata___description
  siteMetadata___email___name
  siteMetadata___email___link
  siteMetadata___privacy_email___name
  siteMetadata___privacy_email___link
  siteMetadata___github___name
  siteMetadata___github___link
  siteMetadata___linkedin___name
  siteMetadata___linkedin___link
  siteMetadata___twitter___name
  siteMetadata___twitter___link
  siteMetadata___discord___name
  siteMetadata___discord___link
  siteMetadata___source
  siteMetadata___default_origin
  siteMetadata___origin
  port
  host
  polyfill
  pathPrefix
  jsxRuntime
  trailingSlash
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  jsxRuntime: StringQueryOperatorInput
  trailingSlash: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  functionRoute
  pluginName
  originalAbsoluteFilePath
  originalRelativeFilePath
  relativeCompiledFilePath
  absoluteCompiledFilePath
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
  field: String!
  fieldValue: String
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON
  pluginCreator: SitePlugin
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  pageContext
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___pluginOptions
  pluginCreator___packageJson
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  resolve
  name
  version
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  pluginOptions
  packageJson
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SitePluginFilterInput {
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  title: String
  description: String
  email: SiteSiteMetadataEmail
  privacy_email: SiteSiteMetadataPrivacy_email
  github: SiteSiteMetadataGithub
  linkedin: SiteSiteMetadataLinkedin
  twitter: SiteSiteMetadataTwitter
  discord: SiteSiteMetadataDiscord
  source: String
  default_origin: String
  origin: String
}

type SiteSiteMetadataDiscord {
  name: String
  link: String
}

input SiteSiteMetadataDiscordFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

type SiteSiteMetadataEmail {
  name: String
  link: String
}

input SiteSiteMetadataEmailFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  email: SiteSiteMetadataEmailFilterInput
  privacy_email: SiteSiteMetadataPrivacy_emailFilterInput
  github: SiteSiteMetadataGithubFilterInput
  linkedin: SiteSiteMetadataLinkedinFilterInput
  twitter: SiteSiteMetadataTwitterFilterInput
  discord: SiteSiteMetadataDiscordFilterInput
  source: StringQueryOperatorInput
  default_origin: StringQueryOperatorInput
  origin: StringQueryOperatorInput
}

type SiteSiteMetadataGithub {
  name: String
  link: String
}

input SiteSiteMetadataGithubFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

type SiteSiteMetadataLinkedin {
  name: String
  link: String
}

input SiteSiteMetadataLinkedinFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

type SiteSiteMetadataPrivacy_email {
  name: String
  link: String
}

input SiteSiteMetadataPrivacy_emailFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

type SiteSiteMetadataTwitter {
  name: String
  link: String
}

input SiteSiteMetadataTwitterFilterInput {
  name: StringQueryOperatorInput
  link: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

input WebPOptions {
  quality: Int
}

