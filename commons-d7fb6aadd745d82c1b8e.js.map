{"version":3,"file":"commons-d7fb6aadd745d82c1b8e.js","mappings":"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","sources":["webpack://homepage/./src/components/seo.tsx","webpack://homepage/../src/image-utils.ts","webpack://homepage/../src/components/hooks.ts","webpack://homepage/../src/components/layout-wrapper.tsx","webpack://homepage/../src/components/picture.tsx","webpack://homepage/../src/components/placeholder.tsx","webpack://homepage/../src/components/main-image.tsx","webpack://homepage/../src/components/gatsby-image.server.tsx","webpack://homepage/../src/components/gatsby-image.browser.tsx","webpack://homepage/../src/components/static-image.server.tsx","webpack://homepage/../src/components/static-image.tsx","webpack://homepage/./src/utils/svg_mask.tsx","webpack://homepage/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://homepage/./src/styles/heading.module.scss","webpack://homepage/./src/components/heading.tsx","webpack://homepage/./src/styles/layout.module.scss","webpack://homepage/./src/components/layout.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\nimport React from \"react\";\nimport { globalHistory } from \"@reach/router\";\n\ninterface SEOProps {\n    heading?: string;\n    description?: string;\n    banner?: string;\n}\nconst SEO = (props: SEOProps) => {\n    const data: Queries.SEOQuery = useStaticQuery(graphql`\nquery SEO {\n  site {\n    siteMetadata {\n      origin\n      default_origin\n      cloudflare_token\n    }\n  }\n}\n    `);\n    const title = props.heading ? `${props.heading}—Christopher Besch` : \"Christopher Besch—Software Developer\";\n    const description = props.description;\n\n    const url = globalHistory.location.href;\n    const origin = data.site?.siteMetadata?.origin;\n    const deploy_origin = data.site?.siteMetadata?.default_origin as string;\n    const path = globalHistory.location.pathname;\n    // replace origin with default one\n    const canonical_url = `${deploy_origin}${path}`;\n\n    const banner = props.banner ? `${origin}${props.banner}` : undefined;\n\n    return (\n        <>\n            <meta charSet=\"utf-8\" />\n            <title>{title}</title>\n            <link rel=\"canonical\" href={canonical_url} />\n            <link rel=\"shortcut icon\" href=\"/favicon.png\" />\n            <meta\n                property=\"og:url\"\n                content={url}\n            />\n            <meta\n                property=\"og:title\"\n                content={title}\n            />\n            <meta\n                property=\"twitter:title\"\n                content={title}\n            />\n            {description ? <meta\n                property=\"og:description\"\n                content={description} /> : undefined}\n            {description ? <meta\n                property=\"twitter:description\"\n                content={description} /> : undefined}\n            {banner ? <meta\n                property=\"og:image\"\n                content={banner}\n            /> : undefined}\n            {banner ? <meta\n                property=\"twitter:image\"\n                content={banner}\n            /> : undefined}\n            <meta\n                name=\"twitter:card\"\n                content={banner ? \"summary_large_image\" : \"summary\"}\n            />\n            <meta\n                name=\"twitter:site\"\n                content=\"@besch_chris\"\n            />\n            <meta\n                name=\"twitter:creator\"\n                content=\"@besch_chris\"\n            />\n\n            <meta\n                name=\"author\"\n                content=\"Christopher Besch\"\n            />\n            <meta\n                name=\"description\"\n                content={title}\n            />\n\n            {/* cloudflare analytics */}\n            <script defer src=\"https://static.cloudflareinsights.com/beacon.min.js\"\n                data-cf-beacon={JSON.stringify({ token: data.site?.siteMetadata?.cloudflare_token })}></script>\n\n            {/* preloading fonts */}\n            <link\n                rel=\"preload\"\n                href=\"/fonts/LiberationSans-Regular-webfont.woff\"\n                as=\"font\"\n                type=\"font/woff\"\n                crossOrigin=\"anonymous\"\n            />\n            <link\n                rel=\"preload\"\n                href=\"/fonts/LiberationMono-Regular-webfont.woff\"\n                as=\"font\"\n                type=\"font/woff\"\n                crossOrigin=\"anonymous\"\n            />\n\n            {/* Samsung Internet likes to be special: https://developer.samsung.com/internet/blog/en/2020/12/15/dark-mode-in-samsung-internet */}\n            {/* this doesn't actually work: https://forum.developer.samsung.com/t/websites-dark-mode-gets-overridden-by-samsung-internets-dark-mode/22937/11 */}\n            {/* the user has to set this: Internet → Settings → Labs → \"Use website dark theme\" */}\n            <meta name=\"color-scheme\" content=\"light dark\" />\n        </>\n    );\n}\nexport default SEO;\n\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","export default function get_mask(url: string): object {\n    return ({\n        maskImage: `url(\"${url}\")`,\n        WebkitMaskImage: `url(\"${url}\")`,\n    });\n};\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","// extracted by mini-css-extract-plugin\nexport var heading = \"heading-module--heading--da250\";\nexport var icon = \"heading-module--icon--29bfa\";\nexport var sub_heading = \"heading-module--sub_heading--fc581\";","import React from \"react\";\n\nimport * as styles from \"src/styles/heading.module.scss\";\nimport get_mask from \"src/utils/svg_mask\";\n\ninterface HeadingProps {\n    heading: string;\n    sub_heading?: string;\n    keep_line?: boolean;\n    icon?: string;\n    className?: string;\n}\nconst Heading = (props: HeadingProps) =>\n    <div className={`${styles.heading} ${props.className} ${!props.keep_line ? styles.remove_line : undefined}`}>\n        <h1>\n            {props.heading}\n            {props.icon ? <span className={styles.icon} style={get_mask(props.icon)}></span> : undefined}\n        </h1>\n        <span className={styles.sub_heading}>{props.sub_heading}</span>\n        <hr />\n    </div>\n\nexport default Heading;\n\n","// extracted by mini-css-extract-plugin\nexport var banner_container = \"layout-module--banner_container--a41eb\";\nexport var banner_content = \"layout-module--banner_content--e2e7c\";\nexport var banner_content_container = \"layout-module--banner_content_container--a0ea0\";\nexport var banner_image = \"layout-module--banner_image--dcc1f\";\nexport var content = \"layout-module--content--bb822\";\nexport var emoji = \"layout-module--emoji--331ca\";\nexport var footer = \"layout-module--footer--e1bdf\";\nexport var hamburger = \"layout-module--hamburger--87b13\";\nexport var link = \"layout-module--link--f12e2\";\nexport var logo = \"layout-module--logo--f4ece\";\nexport var nav = \"layout-module--nav--99ad1\";\nexport var nav_menu = \"layout-module--nav_menu--ba828\";\nexport var small_banner_content = \"layout-module--small_banner_content--7a8d1\";\nexport var small_banner_image = \"layout-module--small_banner_image--b04ab\";\nexport var waveAnimation = \"layout-module--wave-animation--98126\";\nexport var white_heading = \"layout-module--white_heading--2732c\";","import { graphql, Link, useStaticQuery } from \"gatsby\";\nimport { getImage, GatsbyImage, ImageDataLike } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport Heading from \"src/components/heading\";\nimport \"src/styles/global.scss\";\nimport * as styles from \"src/styles/layout.module.scss\";\n\ninterface LayoutProps {\n    icon?: string;\n    children?: React.ReactNode;\n    heading?: string;\n    keep_heading_line?: boolean;\n    sub_heading?: string;\n    banner_image?: ImageDataLike;\n    banner_content?: React.ReactNode;\n    banner_image_style?: React.CSSProperties;\n    small_banner?: boolean;\n}\nconst Layout = (props: LayoutProps) => {\n    const data: Queries.LayoutQuery = useStaticQuery(graphql`\nquery Layout {\n  site {\n    siteMetadata {\n      source\n    }\n  }\n}\n    `);\n    const source = data.site?.siteMetadata?.source as string;\n\n    const use_banner_image = props.banner_image != undefined;\n\n    const page_heading = props.heading ? <Heading className={use_banner_image ? styles.white_heading : undefined} heading={props.heading} keep_line={props.keep_heading_line} icon={props.icon} sub_heading={props.sub_heading} /> : undefined;\n    const page_header_text = use_banner_image ?\n        <div className={styles.banner_content_container}>\n            <div className={props.small_banner ? styles.small_banner_content : styles.banner_content}>\n                {page_heading}\n                {props.banner_content}\n            </div>\n        </div>\n        : <div>\n            {page_heading}\n            {props.banner_content}\n        </div>;\n\n    return (\n        <div>\n            <nav className={styles.nav}>\n                <Link className={styles.logo} to=\"/\">\n                    <h1>Christopher Besch</h1>\n                    <h2>Software Developer</h2>\n                </Link>\n                <div>\n                    <input type=\"checkbox\" id=\"nav_toggle\" />\n                    <label htmlFor=\"nav_toggle\" className={styles.hamburger}>&#9776;</label>\n                    <ul className={styles.nav_menu}>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/articles\">Articles</Link></li>\n                        <li><Link to=\"/projects\">Projects</Link></li>\n                        <li><Link to=\"/talks\">Talks</Link></li>\n                        <li><Link to=\"/photography\">Photography</Link></li>\n                        <li><Link to=\"/articles/bookmarks\">Bookmarks</Link></li>\n                        <li><Link to=\"/about\">About</Link></li>\n                    </ul>\n                </div>\n            </nav >\n\n            {\n                use_banner_image\n                    ? <div className={styles.banner_container}>\n                        <GatsbyImage style={props.banner_image_style} className={`${props.small_banner ? styles.small_banner_image : styles.banner_image}`} image={getImage(props.banner_image!)!} alt=\"\" />\n                        {page_header_text}\n                    </div>\n                    : undefined\n            }\n\n            <div className={styles.content}>\n                {\n                    use_banner_image\n                        ? undefined\n                        : page_header_text\n                }\n                {props.children}\n            </div>\n\n            <footer className={styles.footer}>\n                <ul>\n                    <li className={styles.link}><Link to=\"/about\">Contact</Link></li>\n                    <li className={styles.link}><a href={source} target=\"_blank\">Source</a></li>\n                    <li className={styles.link}><Link to=\"/privacy\">Privacy</Link></li>\n                    <li><p>&#169; 2025 | All rights reserved</p></li>\n                    <li className={styles.emoji}><p>🔗</p></li>\n                </ul>\n            </footer>\n        </div>\n    );\n}\nexport default Layout;\n\n"],"names":["props","_data$site","_data$site$siteMetada","_data$site2","_data$site2$siteMetad","_data$site3","_data$site3$siteMetad","data","useStaticQuery","title","heading","description","url","globalHistory","location","href","origin","site","siteMetadata","canonical_url","default_origin","pathname","banner","undefined","React","charSet","rel","property","content","name","defer","src","JSON","stringify","token","cloudflare_token","as","type","crossOrigin","W","hasNativeLazyLoadSupport","HTMLImageElement","prototype","_","e","t","a","Boolean","images","fallback","gatsbyImageData","gatsbyImage","childImageSharp","z","i","s","width","height","className","style","P","h","loading","shouldLoad","opacity","A","r","n","o","l","backgroundColor","position","top","left","bottom","right","objectFit","objectPosition","d","transition","H","F","_ref5","layout","paddingTop","maxWidth","display","alt","role","G","children","u","V","B","U","srcSet","decoding","Y","sources","sizes","length","map","_ref6","media","key","X","propTypes","isRequired","displayName","J","Z","Error","K","Q","ee","te","replace","ae","_len","arguments","Array","_key","c","apply","concat","ie","image","se","re","ne","Set","oe","le","de","class","g","onStartLoad","p","onLoad","m","onError","f","w","y","b","v","E","k","S","M","N","$","I","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","console","warn","ge","imgClassName","imgStyle","placeholder","pe","_len2","_key2","me","fe","we","get_mask","maskImage","WebkitMaskImage","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","x","trim","filter","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","preserveCamelCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","lastIndex","m1","charAt","postProcess","identifier","module","exports","icon","sub_heading","styles","keep_line","use_banner_image","banner_image","page_heading","Heading","keep_heading_line","page_header_text","small_banner","banner_content","Link","to","id","htmlFor","GatsbyImage","banner_image_style","getImage","target"],"sourceRoot":""}