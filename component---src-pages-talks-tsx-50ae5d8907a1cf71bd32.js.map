{"version":3,"file":"component---src-pages-talks-tsx-50ae5d8907a1cf71bd32.js","mappings":"+LAcA,UARcA,IAA6C,IAA5C,KAAEC,GAAqCD,EAClD,MAAME,EAAQD,EAAKE,OAAOC,MAAMC,IAAIC,EAAAA,IACpC,OACIC,EAAAA,cAACC,EAAAA,EAAM,CAACC,QAAQ,SACZF,EAAAA,cAACG,EAAAA,GAAQ,CAACC,MAAOT,IACX,EAKX,MA0BMU,EAAOA,IAChBL,EAAAA,cAACM,EAAAA,EAAG,CAACJ,QAAQ,S,0ICtCN,EAAO,gCCWX,SAASK,EAAoBC,GAAqB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACpD,MAAO,CACHC,GAAIN,EAAQO,KAAKD,GACjBE,KAA8B,QAA1BP,EAAED,EAAQO,KAAKE,mBAAW,IAAAR,OAAA,EAAxBA,EAA0BO,KAChCE,YAAqC,QAA1BR,EAAEF,EAAQO,KAAKE,mBAAW,IAAAP,OAAA,EAAxBA,EAA0BQ,YACvCC,KAAO,aAAoC,QAA1BR,EAAEH,EAAQO,KAAKE,mBAAW,IAAAN,OAAA,EAAxBA,EAA0BS,OAC7CC,MAA+B,QAA1BT,EAAEJ,EAAQO,KAAKE,mBAAW,IAAAL,OAAA,EAAxBA,EAA0BS,MACjCC,OAAOC,EAAAA,EAAAA,GAAiC,QAAzBV,EAACL,EAAQO,KAAKE,mBAAW,IAAAJ,OAAA,EAAxBA,EAA0BS,OAC1CE,aAAa,EAErB,CAEO,SAASzB,EAAiB0B,GAAkB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAC9C,MAAO,CACHhB,GAAIW,EAAKV,KAAKD,GACdE,KAA2B,QAAvBU,EAAED,EAAKV,KAAKE,mBAAW,IAAAS,OAAA,EAArBA,EAAuBV,KAC7BE,YAAkC,QAAvBS,EAAEF,EAAKV,KAAKE,mBAAW,IAAAU,OAAA,EAArBA,EAAuBT,YACpCC,KAA2B,QAAvBS,EAAEH,EAAKV,KAAKE,mBAAW,IAAAW,OAAA,EAArBA,EAAuBT,KAC7BE,MAA4B,QAAvBQ,EAAEJ,EAAKV,KAAKE,mBAAW,IAAAY,OAAA,EAArBA,EAAuBR,MAC9BC,OAAOC,EAAAA,EAAAA,GAA8B,QAAtBO,EAACL,EAAKV,KAAKE,mBAAW,IAAAa,OAAA,EAArBA,EAAuBR,OACvCE,aAAa,EAErB,CAoCA,MA9BkBO,GAEV/B,EAAAA,cAAA,OAAKgC,UAAWD,EAAMC,WACjBD,EAAM3B,MAAMN,KAAImC,IACb,MAAMC,EAAelC,EAAAA,cAAA,OAAKgC,UD1CxB,iCC2CEhC,EAAAA,cAAA,OAAKgC,UD7CN,kCC8CKhC,EAAAA,cAACmC,EAAAA,EAAW,CAACC,MAAOH,EAAKX,MAAOe,IAAI,eAExCrC,EAAAA,cAAA,OAAKgC,UDnDP,iCCoDMhC,EAAAA,cAAA,WACIA,EAAAA,cAAA,MAAIgC,UDnDX,oCCmDuCC,EAAKZ,OACrCrB,EAAAA,cAAA,WACAA,EAAAA,cAAA,WACKiC,EAAKf,YAAYoB,MAAM,MAAMxC,KAAI,CAACyC,EAAWC,IAC1CxC,EAAAA,cAAA,KAAGyC,IAAKD,GAAMD,OAK1BvC,EAAAA,cAAA,KAAGgC,UD7DT,iCC6DkCC,EAAKjB,QAGzC,OAAOiB,EAAKT,YACNxB,EAAAA,cAAC0C,EAAAA,GAAI,CAACC,GAAIV,EAAKd,KAAMsB,IAAKR,EAAKnB,GAAIkB,UAAWY,GAAcV,GAC5DlC,EAAAA,cAAA,KAAG6C,OAAO,SAASC,KAAMb,EAAKd,KAAMsB,IAAKR,EAAKnB,GAAIkB,UAAWY,GAAcV,EAAiB,I","sources":["webpack://homepage/./src/pages/talks.tsx","webpack://homepage/./src/styles/tile_list.module.scss","webpack://homepage/./src/components/tile_list.tsx"],"sourcesContent":["import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\nimport Layout from \"src/components/layout\";\nimport SEO from \"src/components/seo\";\nimport TileList, { gql_talk_to_tile } from \"src/components/tile_list\";\n\nconst Talks = ({ data }: PageProps<Queries.TalksQuery>) => {\n    const talks = data.allMdx.edges.map(gql_talk_to_tile);\n    return (\n        <Layout heading=\"Talks\">\n            <TileList tiles={talks} />\n        </Layout >\n    );\n};\nexport default Talks;\n\nexport const query = graphql`\nquery Talks {\n  allMdx(\n    sort: {frontmatter: {date: DESC}}\n    filter: {frontmatter: {type: {eq: \"talk\"}, listed: {eq: true}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          description\n          title\n          link\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n\nexport const Head = () => (\n    <SEO heading=\"Talks\" />\n);\n","// extracted by mini-css-extract-plugin\nexport var body = \"tile_list-module--body--f1f53\";\nexport var date = \"tile_list-module--date--a07c1\";\nexport var heading = \"tile_list-module--heading--500db\";\nexport var image = \"tile_list-module--image--41f35\";\nexport var link = \"tile_list-module--link--7d30d\";\nexport var tile = \"tile_list-module--tile--ecd3c\";","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { getImage, GatsbyImage, IGatsbyImageData, ImageDataLike } from \"gatsby-plugin-image\";\n\nimport * as styles from \"src/styles/tile_list.module.scss\";\n\nexport type Tile = {\n    id: number;\n    date: string;\n    description: string;\n    link: string;\n    title: string;\n    thumb: IGatsbyImageData;\n    is_internal: boolean;\n}\n\nexport function gql_article_to_tile(article: any): Tile {\n    return {\n        id: article.node.id,\n        date: article.node.frontmatter?.date,\n        description: article.node.frontmatter?.description,\n        link: `/articles/${article.node.frontmatter?.slug}`,\n        title: article.node.frontmatter?.title,\n        thumb: getImage(article.node.frontmatter?.thumb as ImageDataLike)!,\n        is_internal: true,\n    };\n}\n\nexport function gql_talk_to_tile(talk: any): Tile {\n    return {\n        id: talk.node.id,\n        date: talk.node.frontmatter?.date,\n        description: talk.node.frontmatter?.description,\n        link: talk.node.frontmatter?.link,\n        title: talk.node.frontmatter?.title,\n        thumb: getImage(talk.node.frontmatter?.thumb as ImageDataLike)!,\n        is_internal: false,\n    };\n}\n\ninterface TileListProps {\n    tiles: Tile[];\n    className?: string;\n}\nconst TileList = (props: TileListProps) => {\n    return (\n        <div className={props.className}>\n            {props.tiles.map(tile => {\n                const tile_content = <div className={styles.tile}>\n                    <div className={styles.image}>\n                        <GatsbyImage image={tile.thumb} alt=\"thumbnail\" />\n                    </div>\n                    <div className={styles.body}>\n                        <div>\n                            <h2 className={styles.heading}>{tile.title}</h2>\n                            <hr />\n                            <div>\n                                {tile.description.split(\"\\n\").map((paragraph, idx) =>\n                                    <p key={idx}>{paragraph}</p>\n                                )}\n                            </div>\n                        </div>\n\n                        <p className={styles.date}>{tile.date}</p>\n                    </div>\n                </div>\n                return tile.is_internal\n                    ? <Link to={tile.link} key={tile.id} className={styles.link}>{tile_content}</Link>\n                    : <a target=\"_blank\" href={tile.link} key={tile.id} className={styles.link}>{tile_content}</a>;\n            }\n            )}\n        </div>\n    );\n};\nexport default TileList;\n\n"],"names":["_ref","data","talks","allMdx","edges","map","gql_talk_to_tile","React","Layout","heading","TileList","tiles","Head","SEO","gql_article_to_tile","article","_article$node$frontma","_article$node$frontma2","_article$node$frontma3","_article$node$frontma4","_article$node$frontma5","id","node","date","frontmatter","description","link","slug","title","thumb","getImage","is_internal","talk","_talk$node$frontmatte","_talk$node$frontmatte2","_talk$node$frontmatte3","_talk$node$frontmatte4","_talk$node$frontmatte5","props","className","tile","tile_content","GatsbyImage","image","alt","split","paragraph","idx","key","Link","to","styles","target","href"],"sourceRoot":""}